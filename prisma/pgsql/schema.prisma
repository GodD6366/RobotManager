generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       String   @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {

  id         Int     @id @default(autoincrement())
  email      String  @unique
  name       String?
  pwd        String?
  telegramId String? @map(name: "telegram_id")
  wechatId   String? @map(name: "wechat_id")
  dingId     String? @map(name: "ding_id")
  feishuId   String? @map(name: "feishu_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model RobotType {
  id   Int    @id @default(autoincrement())
  type String
  name String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  @@map(name: "robot_types")
}

model Robot {
  id          Int     @id @default(autoincrement())
  name        String
  token       String?
  secret      String?
  // 关联类型
  robotTypeId Int     @map(name: "robot_type_id")
  // 关联所有者
  ownerId     Int?     @map(name: "owner_id")
  // 编组ID
  groupId     Int?     @map(name: "group_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  @@map(name: "robots")
}

// 机器人编组
// TODO：还没想好怎么设计
model RobotGroup {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  @@map(name: "robot-group")
}

model Rule {
  id       Int     @id @default(autoincrement())
  name     String
  priority Int     @default(1000)
  // 判断是否匹配此策略
  type     Int     @default(1)
  func     String?
  webhook  String?
  text     String?

  robotId Int @map(name: "robot_id")
  //   Robot   Robot @relation(fields: [robotId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  @@map(name: "rules")
}

model Webhook {
  id      Int    @id @default(autoincrement())
  name    String
  token   String
  robotId Int    @map(name: "robot_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  @@map(name: "webhooks")
}
